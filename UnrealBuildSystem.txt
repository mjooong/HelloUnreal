언리얼 빌드 시스템
Unreal Build System

언리얼 엔진의 프로젝트 구성과 에디터 동작 방식의 이해
언리얼 엔진의 모듈 시스템을 기반으로 소스 코드를 구성하는 방법
언리얼 플러그인 시스템을 활용한 효과적인 모듈 구성 학습


언리얼 에디터 구성
. 게임 제작을 위해 에픽 게임즈가 제공하는 제작 도구
. 언리얼 엔진의 구성
	에디터 : 게임 제작을 위해 제공되는 응용 프로그램 ( 일반적으로 인식하는 언리얼 엔진 )
	게임 빌드 : EXE 파일과 리소스로 이루어진 독립적으로 동작하는 게임 클라이언트

언리얼 에디터의 특징
. 게임 개발 작업을 위해 다양한 폴더와 파일 이름 규칙이 미리 설정되어 있다
. 정해진 규칙을 잘 파악하고 프로젝트 폴더와 파일을 설정해야 한다

에디터에서 기획과 개발을 완료한 후, 게임 빌드를 통해 최종 게임 빌드를 제작하도록 설정


언리얼 에디터의 동작
. 프로젝트 폴더의 uproject확장자를 더블클릭하면 에디터가 트리거 됨
. 에디터의 실행 방식
	. uproject확장자는 윈도우 레지스트리에 등록되어 있다
	    등록이 안되어 있다면 런처를 실행해 등록
	.UnrealVersionSelector 프로그램으로 프로잭트 정보가 넘겨짐
	.UnrealVersionSelector는 런처가 저장한 에디터 정보로부터 버전에 맞는 에디터를 실행함
. UnrealVersionSelector 소스는 에픽게임즈 GitHub에서 확인 가능



에디터 버전 정보 파악
. 프로젝트.uproject 텍스트 파일에 정해져있다
..uproject 확장자는 에디터를 띄우기 위한 명세서 역할을 함
. 버전 내용은 JSON 형식으로 구성되어 있다
. 파일에 기록된 버전 정보를 바탕으로 에픽 런처가 지정한 정보를 찾아 에디터를 실행
	ProgramData/Epic/UnrealLauncher 폴더에 관련 정보가 있다
	이 역시 JSON 형식으로 설치된 언리얼 버전 정보가 기록되어 있다


모듈 C++ 코드의 관리
. 언리얼 프로젝트가 소스코드를 관리하는 규칙에 따라 소스코드 구조를 구성해야 함
. 소스코드는 멀티 플랫폼 빌드 시스템을 지원하기 위해 특정 프로그램에 종속되어 있지 않음
. 실제 빌드를 진행하는 주체 : Unreal Build Tool 이라는 C#프로그램
. Source폴더에 지정된 규칙대로 소스를 넣으면 플랫폼에 맞춰 알아서 컴파일 징행


Source폴더의 구조
. Source폴더
	타겟 설정파일
	모듈 폴더 (보통은 프로젝트 이름으로 모듈 이름을 지정 )
		모듈 설정 파일
		소스코드파일 (.h 및 .cpp 파일들)

. 타겟 설정 파일 : 전체 솔루션이 다룰 빌드 대상을 지정함
	{프로젝트이름}.Target.cs : 게임 빌드 설정
	{프로젝트이름}Editor.Target.cs : 에디터 빌드 설정

. 모듈 설정 파일 : 모듈을 빌드하기 위한 C++ 프로젝트 설정 정보
	{모듈이름}.Build.cs : 모듈을 빌드하기 위한 환경 설정

C#이 가진 유연한 기능(compile on-the-fly)을 활용해
런타임에 cs파일을 읽어 빌드 환경을 구축하고 컴파일을 진행함


게임 프로젝트의 소스
내가 만든 소스가 게임 프로젝트의 C++ 모듈이 되기 위해 필요한 것
모듈을 구현한 선언한  헤더와 소스파일이 있어야한다
	주로{모듈이름}.h와 {모듈이름}.cpp로 지정함
모듈의 뼈대 제작
	. 매크로를 통해 기본 뼈대 구조를 제작
		IMPLEMENT_MODULE : 일반 모듈
		IMPLEMENT_GAME_MODULE : 게임 모듈
		IMPLEMENT_PRIMARY_GAME_MODULE : 주 게임 모듈
일반적으로 게임 프로젝트는 주 게임 모듈을 하나 선언해야 함

모든 준비가 완료되면 Generate Visual Studiio project files. 메뉴를 선택
Intermediate 폴더레 프로젝트 관련 파일이 자동으로 생성
Source 폴더를 규칙에 맞게 구성하면 Intermediate폴더는 언제든 재생성 가능


모듈간의 종속 관계
	. 모듈 사이에 종속 관계를 설정해 다양한 기능을 구현할 수 있다
	. 우리가 만드는 게임 모듈도 언리얼 엔진이 만든 모듈을 활용해야 한다
	. 언리얼 엔진이 제공하는 모듈 사이에도 종속 관계가 있다

새로운 모듈의 추가
	. 하나의 모듈에 너무 많은 코드가 들어가면 언리얼 엔진은 빌드 방식을 변경함
	. 그렇기에 프로젝트가 커질 수록 모듈을 나누어서 관리하는 것이 유리하다


모듈의 공개와 참조
. 모듈 내 소스를 필요한 만큼만 공개해야 모듈 간 의존성을 줄이고 컴파일 타임을 최소화 할 수 있다
. 공개할 파일은 모두 public 폴더로
	예외) 예전 언리얼 엔진은 Classes폴더가 있어 public폴더 역할을 하면서 언리얼 오브젝트를관리했음
. 숨길 파일은 모두 private 폴더로
. 외부로 공개할 클래스 선언에는 {모듈이름}_DLL 매크로를 붙일 것
. 게임 모듈에서는 Build.cs 설정을 통해 참조할 모듈을 지정할 수 있다

플러그인 시스템
. 게임 프로젝트 소스에 모듈을 추가하는 방법은 분업이 어렵다
. 모듈만 독립적으로 동작하는 플러그인 구조를 만들어 분업화하는 것이 바람직함

플러그인 구조
. 플러그인은 다수의 모듈과 게임 콘텐츠를 포함하는 포장 단위
. 에디터 설정을 통해 유연하게 플러그인을 추가하거나 삭제할 수 있다
. 플러그인 구조 
	.플러그인 명세서 (uplugin파일)
	. 플러그인 리소스 (Resource 폴더, 에디터 메뉴용 아이콘)
	. 콘텐츠
	. 모듈 폴더
. 이러한 플러그인은 마켓 플레이스 판매로도 이어질 수 있도록 여러 설정을 추가할 수 있다



게임 빌드
. 게임 타겟 설정을 추가하면 게임 빌드 옵션이 추가됨
. 게임 타겟으로 빌드된 모듈은 정적 라이브러리로 실행 파일에 포함됨
. 게임이 실행되기 위해서는 실행 파일과 콘텐츠 애셋이 함께 있어야 함
. 빌드 : 실행 파일을 생성하기 위한 컴파일
. 쿠킹 : 지정한 플랫폼에 맞춰 콘텐츠 애셋을 변환하는 작업
. 패키징 : 이들을 모두 모아서 하나의 프로그램으로 만드는 과정


정리
 언리얼 빌드 시스템
1. uproject명세서를 사용한 언리얼 에디터 동작 원리
2. 언리얼 엔진의 모듈 시스템과 소스코드 관리 방법
3. 모듈 작업 분리를 위한 플러그인 시스템
4. 언리얼 소스코드의 구조
5. 게임 빌드의 설정과 게임 패키징 과정













































