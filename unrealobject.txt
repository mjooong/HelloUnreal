//=========================================================================================

언리얼 오브젝트 소개(Unreal Object introduction)

*목표*
. 게임 프로그래밍이 가지는 특수성과 언리얼 오브젝트의 필요성 이해
. 언리얼 오브젝트의 선언과 엔진 내부 컴파일 과정 학습

언리얼 엔진이 설계한 새로운 시스템의 단위 오브젝트(객체)
 . 기존 C++ 오브젝트에 모던 객체 지향 설계를 위한 다양한 기능을 추가한 오브젝트
 . 일반 C++ 오브젝트와 언리얼 오브젝트의 두 객체를 모두 사용 가능
 . 구분을 위해 일반 C++ 오브젝트는 F, 언리얼 오브젝트는 접두사 U를 사용

각 오브젝트의 사용 용도
 . C++ 오브젝트 : 저수준의 빠른 처리를 위한 기능 구현에 사용
 . 언리얼 오브젝트 : 콘텐츠 제작에 관련된 복잡한 설계 구현에 사용

오브젝트가 가지는 특징
 . 클래스 기본 객체(CDO)  : 클래스의 기본 값과 타입 정보의 제공
 . 리플렉션(Reflection)  : 런타임에서 클래스 정보의 참조 가능
 . 인터페이스(Interface) : 모던 객체 지향 언어가 제공하는 인터페이스의 제공
 . 향상된 열거형               : 보다 향상된 열거형의 지원
 . 델리게이트(Deligate)  : 객체간의 결합을 낮출 수 있는 델리게이트 기능 제공
 . 가비지컬렉션(GarbageCollection) : 자동 메모리 관리
 . 향상된 구조체(Struct)  : 리플렉션이 가능한 구조체 지원
 . 직렬화(Serialization) : 객체 정보를 바이트 스크림으로 저장, 전송, 불러들이는 기능

언리얼 오브젝트 선언

정리
언리얼 오브젝트의 이해
 . 게임이 대형화되면서 성능과 유지보수 두 가지가 모두 중요
 . 언리얼 엔진은 C++ 언어를 확장한 언리얼 오브젝트라는 객체 구조를 고안함
 . 지정된 매크로를 사용해 빌드하면, 추가 코드가 자동으로 만들어지는 구조
 . 언리얼 오브젝트를 사용해 대규모 게임 제작을 안정적으로 설계하고 구현할 수 있음

//=========================================================================================

#####언리얼 오브젝트 리플렉션 시스템#####
(Unreal Object Reflection System 1)

##언리얼 오브젝트의 구성##
* 언리얼 오브젝트에는 특별한 프로퍼티와 함수를 지정할 수 있다
 - 관리되는 클래스 멤버 변수 : UPROPERTY
 - 관리되는 클래스 멤버 함수 : UFUNCTION
 - 에디터와 연동되는 메타데이터를 심을 수 있다

* 모든 언리얼 오브젝트는 클래스 정보와 함께 함
 - 클래스를 사용해 자신이 가진 프로퍼티와 함수 정보를 컴파일 타임과 런타임에서 조회할 수 있다
 
* 이렇게 다양한 기능을 제공하는 언리얼 오브젝트는 NewObject API를 사용해 생성해야 한다


##언리얼 오브젝트의 클래스 기본 오브젝트##
 - 언리얼 클래스 정보에는 클래스 기본 오브젝트(Class Default Object)가 함께 포함되어 있다
 - 클래스 기본 오브젝트는 줄여서 CDO 라고 부른다
 - CDO는 언리얼 객체가 가진 기본 값을 보관하는 템플릿 객체임
 - 한 클래스로부터 다수의 물체를 생성해 게임 콘텐츠에 배치할 때 일관성 있게 기본값을 조정하는데 유용함
 - CDO는 클래스 정보로부터 GetDefaultObject함수를 통해 얻을 수 있다
 - UClass및 CDO는 엔진 초기화 과정에서 생성되므로 콘텐츠 제작에서 안심하고 사용할 수 있다

EX)예제를 위한 클래스 다이어그램
1. 학교에서 학생과 교수가 함께 수업하는 상황 구현
2. 학교 정보는 GameInstance에서 지정
3. 인물 클래스(Person)
 - 학생 (Student)
 - 선생 (Teacher)

정리 
언리얼 오브젝트 시스템 
1. 언리얼 오브젝트에는 항상 클래스 정보를 담은 UClass 객체가 매칭되어 있다,
2. UClass로부터 언리얼 오브젝트의 정보를 파알할 수 있다,
3. UClass에는 클래스 기본오브젝트(CDO)가 연결되어 있어 이를 활용해 개발의 생산성을 향상시킬 수 있다.
4. 클래스 정보롸 CDO는 엔진 초기화 과정에서 생성되므로 게임 개발에서 안전하가 사용 가능
5. 헤더 정보를 변경하거나 생성자 정보를 변경하면 에디터를 끄고 컴파일하는것이 안정적이다.

//=========================================================================================

#####언리얼 오브젝트 리플렉션 시스템 2#####
(Unreal Object Reflection System 2)

오브젝트 리플렉션 시스템 활용

예제를 위한 클래스 다이어그램
1. 학교에서 학생과 교수가 함께 수업하는 상황 구현
2. 학교 정보는 GameInstance에서 지정
3. 인물 클래스(Person)
 - 학생 (Student)
 - 선생 (Teacher)

언리얼 오브젝트의 속성과 함수
- 클래스에 설정할 프로퍼티 정보
- Person에는 DoLesson이라는 가상함수가 있다
 . Student의 DoLesson은 수업을 듣는 행동
 . Teacher의 DoLesson은 수업을 가르치는 행동

Person
- name(이름)
- year(연차)

Student
- id(학번)

Teacher
- id(사번)

정리 
언리얼 리플렉션 시스템 활용
1. 리플렉션 시스템을 사용해 언리얼 오브젝트의 특정 속성과 함수를 이름으로 검색할 수 있다.
2. 리플렉션 시스템을 사용해 접근 지시자와 무관하게 값을 설정할 수 있다
3. 리플렉션 시스템을 사용해 언리얼 오브젝트의 함수를 호출할 수 있다










