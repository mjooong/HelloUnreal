언리얼 오브젝트 관리 1 - 직렬화
Unreal Object Management 1 - Serialization

언리얼 엔진이 제공하는 직렬화 기능 이해
언리얼 오브젝트의 데이터 저장하고 불러들이는 방법 이해


직렬화(Serialization)란?
오브젝트나 연결된 오브젝트의 묶음(오브젝트 그래프)을 바이트 스트림으로 변환하는 과정
	. 복잡한 데이터를 일렬로 세우기 때문에 직렬화

거꾸로 복구시키는 과정도 포함해서 의미
	. 시리얼라이제이션(Serializtion) : 오브젝트 그래프에서 바이트 스트림으로
	. 디시리얼라이제이션(Deserialization) : 바이트 스트림에서 오브젝트 그래프로

직렬화가 가지는 장점
	. 현재 프로그램의 상태를 저장하고 필요한 때 복원할 수 있다 (게임의 저장)
	. 현재 객체의 정보를 클립보드에 복사해서 다른 프로그램에 전송 가능
	. 네트워크를 통해 현재 프로그램의 상태를 다른 컴퓨터에 복원 가능 (멀티플레이어 게임)
	. 데이터 압축, 암호화를 통해 데이터를 효율적이고 안전하게 보관 가능

오브젝트 그래프 <----Byte Stream----> 오브젝트 그래프



직렬화 구현시 고려할 점
. 데이터 레이아웃 : 오브젝트가 소유한 다양한 데이터를 변환할 것인가
. 이식성 : 서로 다른 시스템에 전송해도 이식될 수 있는가
. 버전 관리 : 새로운 기능이 추가될 때 이를 어떻게 확장하고 처리할 것인가
. 성능 : 네트웍 비용을 줄이기 위해 어떤 데이터 형식을 사용할 것인가
. 보안 : 데이터를 어떻게 안전하게 보호할 것인가
. 에러 처리 : 전송 과정에서 문제가 발생할 경우 이를 어떻게 인식하고 처리할 것인가

이러한 상황을 모두 감안해 직렬화 모델을 만드는것은 쉬운 일이 아님


언리얼 직렬화 시스템
. 언리얼 엔진은 이러한 상황을 모두 고려한 직렬화 시스템을 자체적으로 제공하고 있음
. 직렬화 시스템을 위해 제공하는 클래스 FArchive와 연산자
	. 아카이브 클래스 (FArchive)
	. Shift(<<)operator
. 다양한 아카이브 클래스 제공
	. 메모리 아카이브 (FMemoryReader, FMemoryWriter)
	. 파일 아카이브 (FArchiveFileReaderGeneric, FArchiveFileWriterGeneric)
	. 기타 언리얼 오브젝트와 관련된 아카이브 클래스 (FArchiveUObject)
. Json 직렬화 기능 : 별도의 라이브러리를 통해 제공하고 있음


Json 직렬화
. Json(JavaScript Object Notation)
. 웹 환경에서 서버와 클라이언트 사이에 데이터를 주고받을 때 사용하는 텍스트 기반 데이터 포멧

Json 장점
	. 텍스트임에도 데이터 크기가 가볍다
	. 읽기 편해서 데이터를 보고 이해할 수 있다	
	. 사실 상 웹 통신의 표준으로 널리 사용된다

Json 단점
	. 지원하는 타입이 몇 가지 안된다 (문자, 숫자, 불리언, 널, 배열, 오브젝트만 사용 가능)
	. 텍스트 형식으로만 사용할 수 있음

언리얼 엔진의 Json, JsonUtilities 라이브러리 활용


Json 데이터 유형
	. 오브젝트 : {}
		오브젝트 내 데이터 키, 밸류 조합으로 구성됨. 예 { "Key" : 10 }

	. 배열 : []
		배열 내 데이터는 밸류로만 구성됨. 예 ["value1", "value2", "value3"]

	. 이외 데이터
		문자열("string"), 숫자(10 또는 3.14), 불리언(true 또는 false), 널(null)로 구성

{
	"Name" : "유재석",
	"Order" : 59
}



언리얼 스마트 포인터 라이브러리 개요
. 일반 C++ 오브젝트의 포인터 문제를 해결해주는 언리얼 엔진의 라이브러리

. TUniquePtr(유니크포인터) : 지정한 곳에서만 메모리를 관리하는 포인터
	특정 오브젝트에게 명확하게 포인터 해지 권한을 주고 싶은 경우
	delete 구문 없이 함수 실행 후 자동으로 소멸시키고 싶을 때

. TSharedPtr(공유포인터) : 더 이상 사용되지 않으면 자동으로 메모리를 해지하는 포인터
	여러 로직에서 할당된 오브젝트가 공유해서 사용되는 경우
	다른 함수로부터 할당된 오브젝트를 Out으로 받는 경우
	Null 일 수 있다

. TSharedRef(공유레퍼런스) : 공유포인터와 동일하지만, 유효한 객체를 항상 보장받는 레퍼런스
	여러 로직에서 할당된 오브젝트가 공유해서 사용되는 경우
	Not Null을 보장받으며 오브젝트를 편리하게 사용하고 싶은 경우


정리
언리얼 오브젝트 직렬화
1. 언리얼 엔진이 제공하는 직렬화 시스템에 대한 이해
2. FArchive 클래스를 활용한 메모리 아카이브와 파일 아카이브의 활용
3. JsonSerializer를 사용한 JSON 형식의 직렬화 기능의 활용
4. 일반 C++객체 관리를 위한 언리얼 스마트 포인터 라이브러리의 활용

//===========================================================================================

언리얼 오브젝트 관리 2 - 패키지
(Unreal Object Management 2 - Package)

언리얼 엔진의 애셋과 이를 포장한 패키지의 개념 이해
언리얼 에디터에서 볼 수 있도록 애셋을 저장하고 불러들이는 방법의 이해
오브젝트 패스를 사용해 다양한 방식으로 애셋을 로딩하는 방법의 이해

단일 언리얼 오브젝트가 가진 정보는 저장할 수 있지만, 오브젝트들이 조합되어 있다면?
	. 저장된 언리얼 오브젝트 데이터를 효과적으로 찾고 관리하는 법은?
	. 복잡한 계층 구조를 가진 언리얼 오브젝트를 효과적으로 저장과 불러들이는 법을 통일해야 함

언리얼 엔진은 이를 위해 패키지( Package )단위로 언리얼 오브젝트를 관리함

패키지의 중의적 개념
	. 언리얼 엔진은 다양한 곳에서 단어 패키지를 사용하고 있다
	. 언리얼 오브젝트를 감싼 포장 오브젝트를 의미함
	. 또한 개발된 최종 콘텐츠를 정리해 프로그램으로 만드는 작업을 의미한다 (예 게임 패키징)
	. DLC와 같이 향후 확장 콘텐츠에 사용되는 별도의 데이터 묶음을 의미하기도 함 (예 pkg파일)


구분을 위해 언리얼 오브젝트 패키지로 부르는 것도 고려


패키지(Package)와 애셋(Asset)
. 언리얼 오브젝트 패키지는 다수의 언리얼 오브젝트를 포장하는데 사용하는 언리얼 오브젝트
	모든 언리얼 오브젝트는 패키지에 소속되어 있다( 예 Transient Package)

. 언리얼 오브젝트 패키지의 서브 오브젝트를 애셋(Asset)이라고 하며 에디터에는 이들이 노출됨

. 구조상 패키지는 다수의 언리얼 오브젝트를 소유할수 있으나, 일반적으로는 하나의 애셋만 가짐

. 애셋은 다시 다수의 서브오브젝트를 가질 수 있으며, 모두 언리얼 오브젝트 패키지에 포함됨.
	하지만 에디터에는 노출되지 않음


애셋 참조와 로딩
애셋 정보의 저장과 로딩 전략

게임 제작 단계에서 애셋 간의 연결 작업을 위해 직접 패키지를 불러 할당하는 작업은 부하가 크다
	. 애셋 로딩 대신 패키지와 오브젝트를 지정한 문자열을 대체해 사용, 이를 오브젝트 경로라고 함
	. 프로젝트 내에 오브젝트 경로 값은 유일함을 보장한다	
	. 그렇기에 오브젝트 간의 연결은 오브젝트 경로 값으로 기록될 수 있다
	. 오브젝트 경로를 사용해 다양한 방법으로 애셋을 로딩할 수 있다	

애셋의 로딩 전략
	. 프로젝트에서 애셋이 반드시 필요한 경우 : 생성자 코드에서 미리 로딩
	. 런타임에서 필요할 때 바로 로딩하는 경우 : 런타임 로직에서 정적 로딩
	. 런타임에서 비동기적으로 로딩하는 경우 : 런타임 로직에서 관리자를 사용해 비동기 로딩


오브젝트 경로 (Object Path)
	. 패키지 이름과 애셋 이름을 한 데 묶은 문자열
	. 애셋 클래스 정보는 생략할 수 있다
	. 패키지 내 데이터를 모두 로드하지 않고 오브젝트 경로를 사용해 필요한 애셋만 로드할 수 있다

{애셋클래스정보}'{패키지이름}.{애셋이름}'
	또는
{패키지이름}.{애셋이름}

애셋 스트리밍 관리자 (Streamable Manager)
. 애셋의 비동기 로딩을 지원하는 관리자 객체
. 콘텐츠 제작과 무관한 싱글턴 클래스에 FStreamableManager를 선언해두면 좋다
	GameInstance는 좋은 선택지
. FStreamableManager를 활용해 애셋의 동기/비동기 로딩을 관리할 수 있다
. 다수의 오브젝트 경로를 입력해 다수의 애셋을 로딩하는 것도 가능


정리
언리얼 오브젝트 패키지
1. 언리얼 오브젝트 패키지 구조 이해
2. 패키지 클래스를 사용한 애셋 데이터 관리
3. 오브젝트 경로의 설계와 이를 활용한 다양한 애셋 로딩 방법 이해



































