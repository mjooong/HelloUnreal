언리얼 컨테이너 라이브러리 1 - Array 와 Set
(Unreal Container Library 1 - Array & Set)

언리얼 대표 컨테이너 라이브러리 TArray, TSet의 내부 구조 이해
각 컨테이너 라이브러리의 장단점을 파악하고, 알맞게 활용하는 방법

. 언리얼 엔진이 자체 제작해 제공하는 자료구조 라이브러리
. 줄여서 UCL라고도 함
. 언리얼 오브젝트를 안정적으로 지원하며 다수 오브젝트 처리에 유용하게 사용
. 언리얼 C++은 다양한 자료구조 라이브러리를 직접 만들어 제공함
. 실제 게임 제작에 유용하게 사용되는 라이브러리로 세가지를 추천
	TArray, TMap, TSet

C++ STL과 언리얼 컨테이너 라이브러리의 차이점
. C++ STL은 범용적으로 설계되어 있다
. C++ STL은 표준이기 때문에 호환성이 높다
. C++ STL에는 많은 기능이 엮여 있어 컴파일 시간이 오래걸린다
. 언리얼 컨테이너 라이브러리는 언리얼 엔진에 특화되어 있다
. 언리얼 컨테이너 라이브러리는 언리얼 오브젝트 구조를 안정적으로 지원
. 언리얼 컨테이너 라이브러리는 가볍고 게임 제작에 최적화 되어있다

주요 컨테이너 라이브러리
. 두 라이브러리의 이름과 용도는 유사하지만, 내부적으로 다르게 구현되어 있다
	- TArray : 오브젝트를 순서대로 담아 효율적으로 관리하는 용도
	- TSet   : 중복되지 않는 요소로 구성된 집합을 만드는 용도
	- TMap   : 키, 밸류 조합의 레코드를 관리하는 용도

Vecto == TArray
set != TSet
map != TMap



TArray의 구조와 활용
. 가변 배열(Dynamic Array) 자료 구조
. STL의 vector와 동작 원리가 유사함
. 게임 제작에서는 가변 배열 자료구로를 효과적으로 활용하는 것이 좋다
	. 데이터가 순차적으로 모여있기 때문에 메모리를 효과적으로 사용할 수 있고 캐시 효율이 높다
	. 컴퓨터 사양이 좋아지면서, 캐시 지역성(Locality)으로 인한 성능 향상은 굉장히 중요해짐
	. 임의 데이터의 접근이 빠르고, 고속으로 요소를 순회하는 것이 가능


. 가변 배열 단점
	. 맨 끝에 데이터를 추가하는 것은 가볍지만, 중간에 요소를 추가하거나 삭제하는 작업은 비용이 큼

. 데이터가 많아질 수록 검색, 삭제, 수정 작업이 느려지기 때문에, 많은 수의 데이터에서
   검색 작업이 빈번하게 일어난다면 TArray 대신 TSet을 사용하는 것이 좋다


TSet의 구조와 활용
STL의 set과 언리얼 TSet의 비교
. STL set의 특징
	. STL set은 이진 트리로 구성되어 있어 정렬을 지원
	. STL set은 메모리 구성이 효율적이지 않다
	. STL set은 요소가 삭제될 때 균형을 위한 재구축이 일어날 수 있다
	. STL set의 모든 자료를 순회하는데 적합하지 않다

. 언리얼 TSet의 특징
	. TSet은 해시테이블 형태로 키 데이터가 구축되어 있어 빠른 검색이 가능
	. TSet은 동적 배열의 형태로 데이터가 모여있음
	. TSet의 데이터는 빠르게 순회할 수 있음
	. TSet의 데이터는 삭제해도 재구축이 일어나지 않음
	. TSet의 자료에는 비어있는 데이터가 있을 수 있음

따라서 STL set 과 TSet 의 활용법은 서로 다르기 때문에 주의
STL의 unordered_set과 유사하게 동작하지만 동일하진 않다
TSet의 중복 없는 데이터 집합을 구축하는데 유용하게 사용할 수 있다


정리
언리얼 컨테이터 라이브러리
1. TArray, TSet 컨테이너 라이브러리 내부 구조와 활용 방법
2. 디버그 빌드를 사용해 메모리 정보를 확인하는 방법
3. 두 컨테이너 라이브러리가 가진 특징 이해

// ==========================================================================================
언리얼 컨테이너 라이브러리 2 - 구조체(Struct) & Map
unreal container library 2 - Struct & Map

언리얼 구조체의 선언과 특징 이해
언리얼 대표 컨테이너 라이브러리 TMap의 내부 구조 이해
세 컨테이너 라이브러리의 장단점을 파악, 알맞게 활용하는 방법

구조체(UStruct)는 관련 프로퍼티를 체계화 및 조작할 수 있는 데이터 구조체이다

언리얼 구조체 UStruct
. 데이터 저장 / 전송에 특화된 가벼운 객체
. 대부분 GENERATED_BODY 매크로를 선언해준다
	. 리플렉션, 직렬화와 같은 유용한 기능을 지원
	. GENERATED_BODY를 선언한 구조체는 UScriptStruct 클래스로 구현됨
	. 이 경우 제한적으로 리플렉션을 지원
	    - 속성 UPROPERTY만 선언할 수 있고 UFUNCTION은 선언할 수 없다

. 언리얼 엔진의 구조체 이름은 F로 시작함
	. 대부분 힙 메모리 할당(포인터 연산) 없이 스택 내 데이터로 사용됨
	. NewObjectAPI를 사용할 수 없음


객체의 동적 배열 관리를 위한 예제 다이어그램
. 언리얼 오브젝트 학생의 동적 배열 관리 방법
. 언리얼 구조체 학생 정보의 동적 배열 관리 방법


TMap의 구조와 활용
STL map의 특징
	. STL map은 STL set과 동일하게 이진 트리로 구성되어 있다
	. 정렬은 지원하지만, 메모리 구성이 효율적이지 않으며, 데이터 삭제시 재구축이 일어날 수 있다
	. 모든 자료를 순회하는데 적합하진 않다

언리얼 TMap의 특징
	. 키, 밸류 구성의 튜플(Tuple)데이터의 TSet구조로 구현되어 있다
	. 해시테이블 형태로 구축되어 있어 빠른 검색이 가능
	. 동적 배열의 형태로 데이터가 모여있다
	. 데이터는 빠르게 순회할 수 있다
	. 데이터는 삭제해도 재구축이 일어나지 않는다
	. 비어있는 데이터가 있을 수 있다
	. TMultiMap을 사용하면 중복 데이터를 관리할 수 있다

동작 원리는 STL unordered_map과 유사하다
키, 밸류 쌍이 필요한 자료구조에 광범위하게 사용된다

TArray    = 빈틈없는 메모리, 가장높은 접근 성능, 가장 높은 순회성능
TSet      = 빠른 중복 감지
TMap          = 중복 불허, 키 밸류 관리
TMultiMap = 중복허용, 키 밸류 관리


정리
구조체와 언리얼 컨테이너 라이브러리
1. TArray, TSet, TMap 컨테이너 라이브러리 내부 구조와 활용 방법
2. 언리얼 구조체의 선언 방법
3. TSet 과 TMap에서 언리얼 구조체를 사용하기 위해 필요한 함수의 선언과 구현 방법





















 
























